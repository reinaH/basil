"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), dateFns = require("date-fns"), luxon = require("luxon"), React = require("react"), React__default = _interopDefault(React), dayPicker = require("@arch-ui/day-picker");

function parseDate(value) {
  const dt = luxon.DateTime.fromISO(value, {
    setZone: !0
  });
  return {
    date: dt.toFormat("yyyy-LL-dd"),
    time: dt.toFormat("HH:mm:ss.SSS"),
    offset: dt.toFormat("ZZ")
  };
}

function stringifyDate(date) {
  return `${date.date}T${date.time}${date.offset}`;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const DateTimeFilterView = props => {
  const parsedDate = props.value ? parseDate(props.value) : parseDate((new Date).toISOString());
  if (!props.filter) return null;
  const {yearRangeFrom: yearRangeFrom, yearRangeTo: yearRangeTo, yearPickerType: yearPickerType} = props.field.config;
  return React__default.createElement(dayPicker.DayTimePicker, _objectSpread(_objectSpread({}, parsedDate), {}, {
    htmlID: "calendar-day-filter",
    handleDayChange: day => {
      props.onChange(stringifyDate(_objectSpread(_objectSpread({}, parsedDate), {}, {
        date: dateFns.formatISO(day, {
          representation: "date"
        })
      })));
    },
    handleTimeChange: event => {
      props.onChange(stringifyDate(_objectSpread(_objectSpread({}, parsedDate), {}, {
        time: event.target.value
      })));
    },
    handleOffsetChange: offset => {
      props.onChange(stringifyDate(_objectSpread(_objectSpread({}, parsedDate), {}, {
        offset: offset
      })));
    },
    yearRangeFrom: yearRangeFrom,
    yearRangeTo: yearRangeTo,
    yearPickerType: yearPickerType
  }));
};

exports.default = DateTimeFilterView;

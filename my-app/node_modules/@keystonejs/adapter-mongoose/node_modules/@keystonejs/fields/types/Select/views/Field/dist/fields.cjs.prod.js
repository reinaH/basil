"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var core = require("@emotion/core"), fields = require("@arch-ui/fields"), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), Select = _interopDefault(require("@arch-ui/select"));

const SelectField = ({onChange: onChange, autoFocus: autoFocus, field: field, value: serverValue, renderContext: renderContext, errors: errors, isDisabled: isDisabled}) => {
  const value = field.options.find(i => i.value === serverValue), htmlID = "ks-input-" + field.path, canRead = errors.every(error => !(error instanceof Error && "AccessDeniedError" === error.name)), error = errors.find(error => error instanceof Error && "AccessDeniedError" === error.name), selectProps = "dialog" === renderContext ? {
    menuPortalTarget: document.body,
    menuShouldBlockScroll: !0
  } : null;
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(fields.FieldInput, null, core.jsx("div", {
    css: {
      flex: 1
    }
  }, core.jsx(Select, _extends({
    autoFocus: autoFocus,
    value: canRead ? value : void 0,
    placeholder: canRead ? void 0 : error.message,
    options: field.options,
    onChange: option => {
      onChange(option ? option.value : null);
    },
    isClearable: !0,
    id: "react-select-" + htmlID,
    inputId: htmlID,
    instanceId: htmlID,
    isDisabled: isDisabled
  }, selectProps)))));
};

exports.default = SelectField;

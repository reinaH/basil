"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require("@babel/runtime/helpers/objectWithoutProperties"), require("@babel/runtime/helpers/classCallCheck"), 
require("lodash.isequal");

var fields = require("../../../../../Controller/dist/fields.cjs.prod.js");

class IntegerController extends fields.default {
  constructor(...args) {
    super(...args), _defineProperty(this, "getFilterGraphQL", ({path: path, type: type, value: value}) => {
      const key = "is" === type ? path : `${path}_${type}`;
      let arg = value.replace(/\s/g, "");
      return arg = [ "in", "not_in" ].includes(type) ? arg.split(",").map(i => parseInt(i)) : parseInt(arg), 
      {
        [key]: arg
      };
    }), _defineProperty(this, "getFilterLabel", ({label: label, type: type}) => {
      const suffix = [ "in", "not_in" ].includes(type) ? " (comma separated)" : "";
      return `${this.label} ${label.toLowerCase()}${suffix}`;
    }), _defineProperty(this, "formatFilter", ({label: label, type: type, value: value}) => `${this.getFilterLabel({
      label: label,
      type: type
    })}: "${value.replace(/\s/g, "")}"`), _defineProperty(this, "serialize", data => {
      const value = data[this.path];
      return "number" == typeof value ? value : "string" == typeof value && value.length > 0 ? parseInt(value, 10) : null;
    }), _defineProperty(this, "getFilterTypes", () => [ {
      type: "is",
      label: "Is exactly",
      getInitialValue: () => ""
    }, {
      type: "not",
      label: "Is not exactly",
      getInitialValue: () => ""
    }, {
      type: "gt",
      label: "Is greater than",
      getInitialValue: () => ""
    }, {
      type: "lt",
      label: "Is less than",
      getInitialValue: () => ""
    }, {
      type: "gte",
      label: "Is greater than or equal to",
      getInitialValue: () => ""
    }, {
      type: "lte",
      label: "Is less than or equal to",
      getInitialValue: () => ""
    }, {
      type: "in",
      label: "Is one of",
      getInitialValue: () => ""
    }, {
      type: "not_in",
      label: "Is not one of",
      getInitialValue: () => ""
    } ]);
  }
}

exports.default = IntegerController;

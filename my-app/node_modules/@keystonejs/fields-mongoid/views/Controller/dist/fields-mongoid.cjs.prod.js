"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), FieldController = _interopDefault(require("@keystonejs/fields/Controller"));

class MongoIdController extends FieldController {
  constructor(...args) {
    super(...args), _defineProperty(this, "getFilterGraphQL", ({type: type, value: value}) => {
      switch (type) {
       case "is":
        return {
          [this.path]: value
        };

       case "not":
        return {
          [this.path + "_not"]: value
        };

       case "in":
        return {
          [this.path + "_in"]: value.split(",").map(value => value.trim())
        };

       case "not_in":
        return {
          [this.path + "_not_in"]: value.split(",").map(value => value.trim())
        };
      }
    }), _defineProperty(this, "getFilterLabel", ({label: label, type: type}) => {
      let suffix = "";
      return [ "in", "not_in" ].includes(type) && (suffix = " (comma separated)"), `${this.label} ${label.toLowerCase()}${suffix}`;
    }), _defineProperty(this, "formatFilter", ({label: label, type: type, value: value}) => {
      let renderedValue = value;
      return [ "in", "not_in" ].includes(type) && (renderedValue = value.split(",").map(value => value.trim()).join(", ")), 
      `${this.label} ${label.toLowerCase()}: ${renderedValue}`;
    }), _defineProperty(this, "getFilterTypes", () => [ {
      type: "is",
      label: "Is exactly",
      getInitialValue: () => ""
    }, {
      type: "not",
      label: "Is not",
      getInitialValue: () => ""
    }, {
      type: "in",
      label: "Is one of",
      getInitialValue: () => ""
    }, {
      type: "not_in",
      label: "Is not one of",
      getInitialValue: () => ""
    } ]);
  }
}

exports.default = MongoIdController;

"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

require("@babel/runtime/helpers/classCallCheck"), require("lodash.isequal");

var fields = require("../../../../../Controller/dist/fields.cjs.prod.js");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

class SelectController extends fields.default {
  constructor(_ref, ...args) {
    let {defaultValue: defaultValue = null} = _ref, config = _objectWithoutProperties(_ref, [ "defaultValue" ]);
    super(_objectSpread(_objectSpread({}, config), {}, {
      defaultValue: defaultValue
    }), ...args), _defineProperty(this, "getFilterGraphQL", ({value: {inverted: inverted, options: options}}) => {
      if (!options.length) return "";
      const isMulti = options.length > 1;
      let key = this.path;
      isMulti && inverted ? key = this.path + "_not_in" : isMulti ? key = this.path + "_in" : inverted && (key = this.path + "_not");
      return {
        [key]: isMulti ? options.map(x => x.value) : options[0].value
      };
    }), _defineProperty(this, "getFilterLabel", () => this.label), _defineProperty(this, "formatFilter", ({value: value}) => {
      if (!value.options.length) return value.inverted ? this.label + " is set" : this.label + " has no value";
      if (value.options.length > 1) {
        const values = value.options.map(i => i.label).join(", ");
        return value.inverted ? `${this.label} is not in [${values}]` : `${this.label} is in [${values}]`;
      }
      const optionLabel = value.options[0].label;
      return value.inverted ? `${this.label} is not ${optionLabel}` : `${this.label} is ${optionLabel}`;
    }), _defineProperty(this, "getFilterValue", value => value && value.options && value.options.length ? value : void 0), 
    _defineProperty(this, "getFilterTypes", () => [ {
      type: "is",
      label: "Matches",
      getInitialValue: () => ({
        inverted: !1,
        options: []
      })
    } ]), this.options = config.options, this.dataType = config.dataType;
  }
}

exports.default = SelectController;

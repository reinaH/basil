"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var core = require("@emotion/core"), fields = require("@arch-ui/fields"), input = require("@arch-ui/input"), alert = require("@arch-ui/alert"), React = require("react"), React__default = _interopDefault(React), octiconsReact = require("@primer/octicons-react"), button = require("@arch-ui/button"), layout = require("@arch-ui/layout"), typography = require("@arch-ui/typography");

const PasswordField = ({onChange: onChange, autoFocus: autoFocus, field: field, item: {password_is_set: password_is_set} = {}, errors: errors, warnings: warnings, isDisabled: isDisabled}) => {
  const focusTarget = React.useRef(), [isEditing, setIsEditing] = React.useState(!1), [showInputValue, setShowInputValue] = React.useState(!1), [inputPassword, setInputPassword] = React.useState(""), [inputConfirm, setInputConfirm] = React.useState("");
  React.useEffect(() => {
    isEditing && onChange({
      inputPassword: inputPassword,
      inputConfirm: inputConfirm
    });
  }, [ inputPassword, inputConfirm ]), React.useEffect(() => {
    isEditing && focusTarget.current && focusTarget.current.focus();
  }, [ isEditing ]);
  const renderErrors = src => {
    const appearance = src === errors ? "danger" : "warning";
    return src.map(({message: message, data: data}) => core.jsx(alert.Alert, {
      appearance: appearance,
      key: message
    }, message, data ? " - " + JSON.stringify(data) : null));
  }, htmlID = "ks-input-" + field.path;
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(fields.FieldInput, null, isEditing ? core.jsx(layout.FlexGroup, {
    growIndexes: [ 0, 1 ]
  }, core.jsx(input.Input, {
    autoComplete: "off",
    autoFocus: autoFocus,
    id: htmlID,
    ref: focusTarget,
    name: "inputPassword",
    onChange: e => setInputPassword(e.target.value),
    placeholder: "New Password",
    type: showInputValue ? "text" : "password",
    value: inputPassword,
    disabled: isDisabled
  }), core.jsx(input.Input, {
    autoComplete: "off",
    autoFocus: autoFocus,
    id: htmlID + "-confirm",
    name: "inputConfirm",
    onChange: e => setInputConfirm(e.target.value),
    placeholder: "Confirm Password",
    type: showInputValue ? "text" : "password",
    value: inputConfirm,
    disabled: isDisabled
  }), core.jsx(button.Button, {
    isActive: showInputValue,
    onClick: () => {
      setShowInputValue(!showInputValue);
    },
    title: showInputValue ? "Hide Text" : "Show Text",
    variant: "ghost",
    isDisabled: isDisabled
  }, core.jsx(typography.A11yText, null, showInputValue ? "Hide Text" : "Show Text"), core.jsx("div", {
    css: {
      width: 20
    }
  }, showInputValue ? core.jsx(octiconsReact.LockIcon, null) : core.jsx(octiconsReact.EyeIcon, null)))) : core.jsx(button.Button, {
    id: htmlID + "-button",
    onClick: () => {
      setIsEditing(!isEditing);
    },
    variant: "ghost",
    isDisabled: isDisabled
  }, password_is_set ? "Update Password" : "Set Password")), renderErrors(errors), renderErrors(warnings));
};

exports.default = PasswordField;

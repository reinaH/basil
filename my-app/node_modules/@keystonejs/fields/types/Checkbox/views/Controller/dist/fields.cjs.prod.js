"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

require("@babel/runtime/helpers/classCallCheck"), require("lodash.isequal");

var fields = require("../../../../../Controller/dist/fields.cjs.prod.js");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

class CheckboxController extends fields.default {
  constructor(_ref, ...args) {
    let {defaultValue: defaultValue = !1} = _ref;
    super(_objectSpread(_objectSpread({}, _objectWithoutProperties(_ref, [ "defaultValue" ])), {}, {
      defaultValue: defaultValue
    }), ...args), _defineProperty(this, "serialize", data => data[this.path]), _defineProperty(this, "deserialize", data => data[this.path]), 
    _defineProperty(this, "getFilterGraphQL", ({type: type, value: value}) => ({
      ["is" === type ? "" + this.path : `${this.path}_${type}`]: value
    })), _defineProperty(this, "getFilterLabel", ({label: label}) => `${this.label} ${label.toLowerCase()}`), 
    _defineProperty(this, "formatFilter", ({label: label, value: value}) => `${this.getFilterLabel({
      label: label
    })}: ${value}`), _defineProperty(this, "getFilterTypes", () => [ {
      type: "is",
      label: "Is",
      getInitialValue: () => !0
    }, {
      type: "not",
      label: "Is not",
      getInitialValue: () => !0
    } ]);
  }
}

exports.default = CheckboxController;

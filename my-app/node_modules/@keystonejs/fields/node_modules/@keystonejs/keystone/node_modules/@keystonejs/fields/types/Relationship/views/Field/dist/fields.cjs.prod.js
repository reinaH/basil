"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require("@babel/runtime/helpers/objectWithoutProperties");

var core = require("@emotion/core"), fields = require("@arch-ui/fields"), React = require("react"), React__default = _interopDefault(React);

require("@babel/runtime/helpers/extends");

var octiconsReact = require("@primer/octicons-react"), button = require("@arch-ui/button"), theme = require("@arch-ui/theme"), client = require("@apollo/client"), Tooltip = _interopDefault(require("@arch-ui/tooltip"));

require("@arch-ui/select"), require("react-select"), require("intersection-observer");

var RelationshipSelect = require("../../../../../dist/RelationshipSelect-a7bf5d1a.cjs.prod.js"), components = require("@keystonejs/app-admin-ui/components");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const MAX_IDS_IN_FILTER = 100;

function SetAsCurrentUser({listKey: listKey, value: value, onAddUser: onAddUser, many: many, isDisabled: isDisabled}) {
  const path = "authenticated" + listKey, {data: data} = client.useQuery(client.gql`
    query User {
      ${path} {
        _label_
        id
      }
    }
  `);
  if (data && data[path]) {
    const userId = data[path].id;
    if (null !== value && (many ? value.some(item => item.id === userId) : value.id === userId)) return null;
    const label = `${many ? "Add" : "Set as"} ${data[path]._label_}`;
    return core.jsx(Tooltip, {
      placement: "top",
      content: label
    }, ref => core.jsx(button.IconButton, {
      css: {
        marginLeft: theme.gridSize
      },
      variant: "ghost",
      ref: ref,
      onClick: () => {
        onAddUser(data[path]);
      },
      icon: octiconsReact.PersonIcon,
      "aria-label": label,
      isDisabled: isDisabled
    }));
  }
  return null;
}

function LinkToRelatedItems({field: field, value: value}) {
  const {many: many} = field.config, {fullPath: fullPath} = field.getRefList();
  let label, isDisabled = !1, link = fullPath;
  return many ? (label = "View List of Related Items", value.length || (isDisabled = !0), 
  link = `${link}?!id_in="${value.slice(0, 100).map(({id: id}) => id).join(",")}"`) : (label = "View Item Details", 
  value ? link = `${link}/${value.id}` : isDisabled = !0), core.jsx(Tooltip, {
    placement: "top",
    content: label
  }, ref => core.jsx(button.IconButton, {
    ref: ref,
    icon: octiconsReact.LinkExternalIcon,
    "aria-label": label,
    variant: "ghost",
    css: {
      marginLeft: theme.gridSize
    },
    target: "_blank",
    to: link,
    isDisabled: isDisabled
  }));
}

function CreateAndAddItem({field: field, item: item, onCreate: onCreate, isDisabled: isDisabled}) {
  const {list: list, openCreateItemModal: openCreateItemModal} = components.useList();
  let prefillData, relatedList = field.getRefList(), label = "Create and add " + relatedList.singular;
  return item && item.id && (prefillData = relatedList.fields.filter(relatedField => "Relationship" === relatedField.type && relatedField.config.ref === list.key && relatedField.config.refFieldPath === field.path).reduce((memo, prefillField) => {
    const prefill = {
      _label_: item._label_ || "<link to parent>",
      id: item.id
    };
    return _objectSpread(_objectSpread({}, memo), {}, {
      [prefillField.path]: prefillField.config.many ? [ prefill ] : prefill
    });
  }, {})), core.jsx(React.Fragment, null, core.jsx(Tooltip, {
    placement: "top",
    content: label
  }, ref => core.jsx(button.IconButton, {
    ref: ref,
    onClick: openCreateItemModal,
    icon: octiconsReact.PlusIcon,
    "aria-label": label,
    variant: "ghost",
    css: {
      marginLeft: theme.gridSize
    },
    isDisabled: isDisabled
  })), core.jsx(components.CreateItemModal, {
    prefillData: prefillData,
    onCreate: ({data: data}) => {
      onCreate(data[relatedList.gqlNames.createMutationName]);
    }
  }));
}

const RelationshipField = ({autoFocus: autoFocus, field: field, value: value = [], renderContext: renderContext, errors: errors, onChange: onChange, item: item, list: list, isDisabled: isDisabled}) => {
  const {many: many, ref: ref} = field.config, {authStrategy: authStrategy} = components.useAdminMeta(), htmlID = "ks-input-" + field.path, relatedList = field.getRefList();
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), core.jsx(fields.FieldDescription, {
    text: field.adminDoc
  }), core.jsx(fields.FieldInput, null, core.jsx("div", {
    css: {
      flex: 1
    }
  }, core.jsx(RelationshipSelect.RelationshipSelect, {
    autoFocus: autoFocus,
    isMulti: many,
    field: field,
    value: value,
    errors: errors,
    renderContext: renderContext,
    htmlID: htmlID,
    onChange: option => {
      const {many: many} = field.config;
      onChange(many ? option ? option.map(i => i.value) : [] : option ? option.value : null);
    },
    isDisabled: isDisabled
  })), core.jsx(components.ListProvider, {
    list: relatedList
  }, core.jsx(CreateAndAddItem, {
    onCreate: item => {
      onChange(many ? value.concat(item) : item);
    },
    field: field,
    item: item,
    list: list,
    isDisabled: isDisabled
  })), authStrategy && ref === authStrategy.listKey && core.jsx(SetAsCurrentUser, {
    many: many,
    onAddUser: user => {
      onChange(many ? value.concat(user) : user);
    },
    value: value,
    listKey: authStrategy.listKey,
    isDisabled: isDisabled
  }), core.jsx(LinkToRelatedItems, {
    field: field,
    value: value
  })));
};

exports.default = RelationshipField;

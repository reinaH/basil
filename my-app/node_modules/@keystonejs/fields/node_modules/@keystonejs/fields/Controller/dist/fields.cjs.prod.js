"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), _classCallCheck = _interopDefault(require("@babel/runtime/helpers/classCallCheck")), isEqual = _interopDefault(require("lodash.isequal")), FieldController = function FieldController(_ref, _ref2, views) {
  var _this = this, readViews = _ref2.readViews, preloadViews = _ref2.preloadViews, getListByKey = _ref2.getListByKey, label = _ref.label, path = _ref.path, type = _ref.type, access = _ref.access, isOrderable = _ref.isOrderable, isPrimaryKey = _ref.isPrimaryKey, isRequired = _ref.isRequired, isReadOnly = _ref.isReadOnly, adminDoc = _ref.adminDoc, defaultValue = _ref.defaultValue, config = _objectWithoutProperties(_ref, [ "label", "path", "type", "access", "isOrderable", "isPrimaryKey", "isRequired", "isReadOnly", "adminDoc", "defaultValue" ]);
  _classCallCheck(this, FieldController), _defineProperty(this, "getQueryFragment", (function() {
    return _this.path;
  })), _defineProperty(this, "serialize", (function(data) {
    return data[_this.path] || null;
  })), _defineProperty(this, "validateInput", (function() {})), _defineProperty(this, "deserialize", (function(data) {
    return data[_this.path];
  })), _defineProperty(this, "hasChanged", (function(initialData, currentData) {
    return !isEqual(initialData[_this.path], currentData[_this.path]);
  })), _defineProperty(this, "getDefaultValue", (function() {
    var _ref3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, _ref3$originalInput = _ref3.originalInput, originalInput = void 0 === _ref3$originalInput ? {} : _ref3$originalInput, _ref3$prefill = _ref3.prefill, prefill = void 0 === _ref3$prefill ? {} : _ref3$prefill;
    return _this._getDefaultValue({
      originalInput: originalInput,
      prefill: prefill
    });
  })), _defineProperty(this, "initCellView", (function() {
    var Cell = _this.views.Cell;
    Cell && _this.readViews([ Cell ]);
  })), _defineProperty(this, "initFieldView", (function() {
    var Field = _this.views.Field;
    Field && _this.readViews([ Field ]);
  })), _defineProperty(this, "initFilterView", (function() {
    var Filter = _this.views.Filter;
    Filter && _this.readViews([ Filter ]);
  })), _defineProperty(this, "getFilterTypes", (function() {
    return [];
  })), _defineProperty(this, "getFilterValue", (function(value) {
    return value;
  })), this.config = config, this.label = label, this.path = path, this.type = type, 
  this.maybeAccess = access, this.isOrderable = isOrderable, this.isPrimaryKey = isPrimaryKey, 
  this.isRequired = isRequired, this.isReadOnly = isReadOnly, this.adminDoc = adminDoc, 
  this.readViews = readViews, this.preloadViews = preloadViews, this.getListByKey = getListByKey, 
  this.views = views, this._getDefaultValue = "function" != typeof defaultValue ? function(_ref4) {
    return _ref4.prefill[_this.path] || defaultValue;
  } : defaultValue;
};

exports.default = FieldController;

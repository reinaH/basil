"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), core = require("@emotion/core"), React = require("react"), React__default = _interopDefault(React), filters = require("@arch-ui/filters"), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), theme = require("@arch-ui/theme"), Select = _interopDefault(require("@arch-ui/select")), options = require("@arch-ui/options");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter((function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    }))), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
      _defineProperty(target, key, source[key]);
    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    }));
  }
  return target;
}

const EventCatcher = props => core.jsx("div", _extends({
  onClick: e => {
    e.preventDefault(), e.stopPropagation();
  }
}, props)), SelectWrapper = props => core.jsx("div", _extends({
  css: {
    marginTop: 2 * theme.gridSize
  }
}, props)), SelectFilterView = ({innerRef: innerRef, field: field, value: value, onChange: onChange}) => {
  const radioValue = value.inverted ? "does_not_match" : "does_match", selectProps = {
    innerRef: innerRef,
    onChange: newValue => {
      const options = [ ...newValue || [] ];
      onChange(_objectSpread(_objectSpread({}, value), {}, {
        options: options
      }));
    },
    options: field.options,
    placeholder: "Select...",
    value: value.options,
    isMulti: !0
  };
  return core.jsx(React.Fragment, null, core.jsx(filters.RadioGroup, {
    onChange: newValue => {
      const inverted = "does_match" !== newValue;
      onChange(_objectSpread(_objectSpread({}, value), {}, {
        inverted: inverted
      }));
    },
    value: radioValue
  }, core.jsx(filters.Radio, {
    value: "does_match"
  }, "Matches"), core.jsx(filters.Radio, {
    value: "does_not_match"
  }, "Does not match")), core.jsx(SelectWrapper, null, field.options.length > 8 ? core.jsx(EventCatcher, null, core.jsx(Select, _extends({
    menuPortalTarget: document.body
  }, selectProps, {
    components: {
      Option: CheckMarkOptionSelect
    }
  }))) : core.jsx(options.Options, _extends({
    displaySearch: !1
  }, selectProps, {
    components: {
      Option: CheckMarkOption
    }
  }))));
}, CheckMarkOption = _ref => {
  let {children: children} = _ref, props = _objectWithoutProperties(_ref, [ "children" ]);
  return core.jsx(options.OptionPrimitive, props, core.jsx("span", null, children), core.jsx(options.CheckMark, {
    isFocused: props.isFocused,
    isSelected: props.isSelected
  }));
}, CheckMarkOptionSelect = props => core.jsx(CheckMarkOption, _extends({}, props, {
  css: {
    paddingLeft: theme.gridSize + "px",
    paddingRight: theme.gridSize + "px"
  }
}));

exports.default = SelectFilterView;

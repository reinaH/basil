"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require("@babel/runtime/helpers/objectWithoutProperties"), require("@babel/runtime/helpers/classCallCheck"), 
require("lodash.isequal");

var fields = require("../../../../../Controller/dist/fields.cjs.prod.js");

class CalendarDayController extends fields.default {
  constructor(...args) {
    super(...args), _defineProperty(this, "getFilterGraphQL", ({type: type, value: value}) => ({
      ["is" === type ? "" + this.path : `${this.path}_${type}`]: value
    })), _defineProperty(this, "getFilterLabel", ({label: label}) => `${this.label} ${label.toLowerCase()}`), 
    _defineProperty(this, "formatFilter", ({label: label, value: value}) => `${this.getFilterLabel({
      label: label
    })}: "${value}"`), _defineProperty(this, "serialize", data => {
      const value = data[this.path];
      return "string" != typeof value ? null : value.trim() || null;
    }), _defineProperty(this, "getFilterTypes", () => [ {
      type: "is",
      label: "Is exactly",
      getInitialValue: () => ""
    }, {
      type: "not",
      label: "Is not exactly",
      getInitialValue: () => ""
    }, {
      type: "gt",
      label: "Is after",
      getInitialValue: () => ""
    }, {
      type: "lt",
      label: "Is before",
      getInitialValue: () => ""
    }, {
      type: "gte",
      label: "Is after or equal to",
      getInitialValue: () => ""
    }, {
      type: "lte",
      label: "Is before or equal to",
      getInitialValue: () => ""
    } ]);
  }
}

exports.default = CalendarDayController;
